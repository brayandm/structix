import json
import os
from typing import Any, Dict, List

DOCS_DIR = "docs/docs/cli-commands"
OUTPUT_FILE = "docs/.vitepress/cliCommands.ts"


def title_case(text: str) -> str:
    """Format file or folder names nicely for sidebar display."""
    text = text.replace("-", " ").replace("_", " ")
    return text.capitalize()


def generate_cli_commands_structure(base_dir: str) -> List[Dict[str, Any]]:
    """Recursively generate the CLI Commands structure based on markdown files."""
    structure: Dict[str, Any] = {}

    for root, _, files in os.walk(base_dir):
        for file in files:
            if file == "overview.md":
                continue
            if not file.endswith(".md"):
                continue
            relative_path = os.path.relpath(os.path.join(root, file), base_dir)
            parts = relative_path.split(os.sep)
            pointer = structure
            for part in parts[:-1]:
                pointer = pointer.setdefault(part, {})
            pointer[parts[-1]] = None

    def build_items(
        tree: Dict[str, Any], current_path: str = "", depth: int = 0
    ) -> List[Dict[str, Any]]:
        items: List[Dict[str, Any]] = []
        for name, subtree in sorted(tree.items()):
            path_no_ext = os.path.join(current_path, name).replace(".md", "")
            path_url = "/" + os.path.join("cli-commands", path_no_ext).replace(
                "\\", "/"
            )
            if subtree is None:
                items.append(
                    {
                        "text": os.path.splitext(name)[0],
                        "link": "/docs" + path_url,
                    }
                )
            else:
                item: Dict[str, Any] = {
                    "text": name,
                    "items": build_items(
                        subtree, os.path.join(current_path, name), depth + 1
                    ),
                }
                if depth >= 1:
                    item["collapsed"] = True
                else:
                    item["collapsed"] = False
                items.append(item)
        return items

    return build_items(structure)


def write_cli_commands_file(items: List[Dict[str, Any]]) -> None:
    """Write the cliCommands.ts file."""
    cli_commands_json: str = json.dumps(items, indent=4)

    content = (
        "// This file is automatically generated. Do not edit manually.\n\n"
        "export const cliCommands = " + cli_commands_json + ";\n"
    )
    os.makedirs(os.path.dirname(OUTPUT_FILE), exist_ok=True)
    with open(OUTPUT_FILE, "w", encoding="utf-8") as f:
        f.write(content)


def main() -> None:
    cli_commands = generate_cli_commands_structure(DOCS_DIR)
    write_cli_commands_file(cli_commands)
    print(f"âœ… CLI Commands structure generated successfully at {OUTPUT_FILE}")


if __name__ == "__main__":
    main()
