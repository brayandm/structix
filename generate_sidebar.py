import json
import os
from typing import Any, Dict, List

DOCS_DIR = "docs/cli-commands"
OUTPUT_FILE = "docs/.vitepress/sidebar.ts"


def title_case(text: str) -> str:
    """Format file or folder names nicely for sidebar display."""
    text = text.replace("-", " ").replace("_", " ")
    return text.capitalize()


def generate_sidebar_structure(base_dir: str) -> List[Dict[str, Any]]:
    """Recursively generate the sidebar structure based on markdown files."""
    structure: Dict[str, Any] = {}

    for root, _, files in os.walk(base_dir):
        for file in files:
            if not file.endswith(".md"):
                continue
            relative_path = os.path.relpath(os.path.join(root, file), base_dir)
            parts = relative_path.split(os.sep)
            pointer = structure
            for part in parts[:-1]:
                pointer = pointer.setdefault(part, {})
            pointer[parts[-1]] = None

    def build_items(
        tree: Dict[str, Any], current_path: str = ""
    ) -> List[Dict[str, Any]]:
        items: List[Dict[str, Any]] = []
        for name, subtree in sorted(tree.items()):
            path_no_ext = os.path.join(current_path, name).replace(".md", "")
            path_url = "/" + os.path.join("cli-commands", path_no_ext).replace(
                "\\", "/"
            )
            if subtree is None:
                items.append(
                    {
                        "text": title_case(os.path.splitext(name)[0]),
                        "link": path_url,
                    }
                )
            else:
                items.append(
                    {
                        "text": title_case(name),
                        "collapsed": True,
                        "items": build_items(
                            subtree, os.path.join(current_path, name)
                        ),
                    }
                )
        return items

    return build_items(structure)


def write_sidebar_file(items: List[Dict[str, Any]]) -> None:
    """Write the sidebar.ts file."""
    sidebar_items_json: str = (
        json.dumps(items, indent=4)
        .replace("true", "true")
        .replace("false", "false")
    )

    content = (
        "// This file is automatically generated. Do not edit manually.\n\n"
        "export const sidebar = [\n"
        "  {\n"
        "    text: 'Documentation',\n"
        "    items: [\n"
        "      {\n"
        "        text: 'Getting Started',\n"
        "        collapsed: false,\n"
        "        items: [\n"
        "          { text: 'Introduction', link: '/getting-started/introduction' },\n"
        "          { text: 'Requirements', link: '/getting-started/requirements' },\n"
        "          { text: 'How to Install', link: '/getting-started/how-to-install' },\n"
        "        ],\n"
        "      },\n"
        "      {\n"
        "        text: 'CLI Commands',\n"
        "        collapsed: true,\n"
        f"        items: {sidebar_items_json}\n"
        "      }\n"
        "    ]\n"
        "  }\n"
        "];\n"
    )
    os.makedirs(os.path.dirname(OUTPUT_FILE), exist_ok=True)
    with open(OUTPUT_FILE, "w", encoding="utf-8") as f:
        f.write(content)


def main() -> None:
    sidebar_items = generate_sidebar_structure(DOCS_DIR)
    write_sidebar_file(sidebar_items)
    print(f"âœ… Sidebar generated successfully at {OUTPUT_FILE}")


if __name__ == "__main__":
    main()
