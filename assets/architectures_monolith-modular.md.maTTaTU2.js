import{_ as i,c as a,o as e,ae as t}from"./chunks/framework.Dh1jimFm.js";const u=JSON.parse('{"title":"Monolith Modular Architecture","description":"","frontmatter":{},"headers":[],"relativePath":"architectures/monolith-modular.md","filePath":"architectures/monolith-modular.md"}'),n={name:"architectures/monolith-modular.md"};function l(o,s,r,h,p,d){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="monolith-modular-architecture" tabindex="-1">Monolith Modular Architecture <a class="header-anchor" href="#monolith-modular-architecture" aria-label="Permalink to &quot;Monolith Modular Architecture&quot;">​</a></h1><p>The <strong>Monolith Modular Architecture</strong> organizes the backend into independent modules while keeping everything inside a single application.</p><p>This approach allows for clear boundaries between different domains of the system without introducing the complexity of distributed systems like microservices.</p><h2 id="root-structure" tabindex="-1">Root Structure <a class="header-anchor" href="#root-structure" aria-label="Permalink to &quot;Root Structure&quot;">​</a></h2><p>At the root level of the project, we have a <code>shared</code> directory, which contains components that are reusable across all modules:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shared/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> value_objects/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> types/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> utils/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exceptions/</span></span></code></pre></div><h3 id="shared-components" tabindex="-1">Shared Components <a class="header-anchor" href="#shared-components" aria-label="Permalink to &quot;Shared Components&quot;">​</a></h3><ul><li><strong>value_objects/</strong>: Defines immutable and domain-driven value objects.</li><li><strong>types/</strong>: Contains global type definitions or type aliases used throughout the application.</li><li><strong>utils/</strong>: Helper functions and utility classes shared across modules.</li><li><strong>exceptions/</strong>: Custom exception classes for handling application-specific errors.</li></ul><hr><h2 id="module-structure" tabindex="-1">Module Structure <a class="header-anchor" href="#module-structure" aria-label="Permalink to &quot;Module Structure&quot;">​</a></h2><p>Each domain feature is grouped into its own <strong>module</strong>.<br> Modules help maintain code separation and encapsulate domain logic clearly.</p><p>Each module has the following structure:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module-name/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> controllers/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> services/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repositories/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dto/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> entities/</span></span></code></pre></div><h3 id="module-components" tabindex="-1">Module Components <a class="header-anchor" href="#module-components" aria-label="Permalink to &quot;Module Components&quot;">​</a></h3><ul><li><strong>controllers/</strong>: Handle incoming HTTP requests, call services, and return responses.</li><li><strong>services/</strong>: Contain the core business logic of the module.</li><li><strong>repositories/</strong>: Abstract data access logic (e.g., database queries).</li><li><strong>dto/</strong>: Data Transfer Objects to validate and shape data entering or leaving the system.</li><li><strong>entities/</strong>: Domain entities representing the core business models.</li></ul><hr><h2 id="cqrs-mode-optional" tabindex="-1">CQRS Mode (Optional) <a class="header-anchor" href="#cqrs-mode-optional" aria-label="Permalink to &quot;CQRS Mode (Optional)&quot;">​</a></h2><p>If <strong>CQRS mode</strong> is enabled for a module (Command Query Responsibility Segregation), the module structure is slightly modified:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module-name/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commands/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> handlers/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dto/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> queries/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> handlers/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dto/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repositories/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> entities/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> controllers/</span></span></code></pre></div><h3 id="cqrs-components" tabindex="-1">CQRS Components <a class="header-anchor" href="#cqrs-components" aria-label="Permalink to &quot;CQRS Components&quot;">​</a></h3><ul><li><strong>commands/handlers/</strong>: Classes that handle &quot;write&quot; operations (creating, updating, deleting).</li><li><strong>commands/dto/</strong>: Data Transfer Objects specifically for commands.</li><li><strong>queries/handlers/</strong>: Classes that handle &quot;read&quot; operations (fetching data).</li><li><strong>queries/dto/</strong>: DTOs related to query requests.</li><li><strong>repositories/</strong>, <strong>entities/</strong>, <strong>controllers/</strong> remain similar.</li></ul><hr><h2 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;Summary&quot;">​</a></h2><p>The Monolith Modular Architecture balances simplicity with scalability:</p><ul><li>Modules create clear domain boundaries.</li><li>Shared utilities promote code reuse.</li><li>Optional CQRS enhances scalability when needed without overcomplicating the project structure.</li></ul><p>This setup is ideal for projects that expect growth but want to maintain the deployment simplicity of a monolith.</p>`,26)]))}const k=i(n,[["render",l]]);export{u as __pageData,k as default};
