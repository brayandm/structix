import{_ as i,c as a,o as n,ae as e}from"./chunks/framework.Dh1jimFm.js";const c=JSON.parse('{"title":"Domain-Driven Design (DDD) Architecture","description":"","frontmatter":{},"headers":[],"relativePath":"architectures/domain-driven-design.md","filePath":"architectures/domain-driven-design.md"}'),t={name:"architectures/domain-driven-design.md"};function l(r,s,h,p,o,k){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="domain-driven-design-ddd-architecture" tabindex="-1">Domain-Driven Design (DDD) Architecture <a class="header-anchor" href="#domain-driven-design-ddd-architecture" aria-label="Permalink to &quot;Domain-Driven Design (DDD) Architecture&quot;">​</a></h1><p>The <strong>Domain-Driven Design (DDD) Architecture</strong> organizes the backend following DDD tactical patterns, ensuring clear separation of concerns between domain logic, application services, and infrastructure.</p><p>This architecture is ideal for medium-to-large systems where domain complexity needs to be modeled cleanly.</p><hr><h2 id="root-structure" tabindex="-1">Root Structure <a class="header-anchor" href="#root-structure" aria-label="Permalink to &quot;Root Structure&quot;">​</a></h2><p>At the root level of the project, we maintain a <code>shared</code> folder that holds elements common across all modules:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shared/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> value_objects/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> types/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> utils/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exceptions/</span></span></code></pre></div><h3 id="shared-components" tabindex="-1">Shared Components <a class="header-anchor" href="#shared-components" aria-label="Permalink to &quot;Shared Components&quot;">​</a></h3><ul><li><strong>value_objects/</strong>: Defines shared, immutable domain value objects.</li><li><strong>types/</strong>: Global type aliases and data definitions.</li><li><strong>utils/</strong>: Helper functions and reusable logic.</li><li><strong>exceptions/</strong>: Application-wide custom exception classes.</li></ul><hr><h2 id="module-structure" tabindex="-1">Module Structure <a class="header-anchor" href="#module-structure" aria-label="Permalink to &quot;Module Structure&quot;">​</a></h2><p>Each domain concept is organized as a module with a strict separation of layers:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module-name/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> domain/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> entities/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> value_objects/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> aggregates/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repositories/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> services/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> events/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exceptions/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> application/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> use_cases/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dto/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> services/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ports/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> infrastructure/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repositories/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> services/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mappers/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> external_services/</span></span></code></pre></div><h3 id="module-components" tabindex="-1">Module Components <a class="header-anchor" href="#module-components" aria-label="Permalink to &quot;Module Components&quot;">​</a></h3><ul><li><p><strong>domain/</strong>:<br> Contains the heart of the business logic.</p><ul><li><strong>entities/</strong>: Core domain entities with identity and lifecycle.</li><li><strong>value_objects/</strong>: Immutable domain-specific value types.</li><li><strong>aggregates/</strong>: Aggregate roots managing consistency boundaries.</li><li><strong>repositories/</strong>: Abstract interfaces for persistence operations.</li><li><strong>services/</strong>: Domain services encapsulating business logic that doesn&#39;t naturally fit inside an entity.</li><li><strong>events/</strong>: Domain events triggered by changes in the model.</li><li><strong>exceptions/</strong>: Domain-specific exception classes.</li></ul></li><li><p><strong>application/</strong>:<br> Coordinates interaction between the outside world and the domain.</p><ul><li><strong>use_cases/</strong>: Application-specific tasks orchestrating domain operations.</li><li><strong>dto/</strong>: Data Transfer Objects for inbound and outbound communications.</li><li><strong>services/</strong>: Application services implementing use cases.</li><li><strong>ports/</strong>: Abstractions for communication with infrastructure or other systems.</li></ul></li><li><p><strong>infrastructure/</strong>:<br> Implements technical concerns and integrations.</p><ul><li><strong>repositories/</strong>: Concrete implementations of domain repository interfaces.</li><li><strong>services/</strong>: Infrastructure-level services.</li><li><strong>mappers/</strong>: Utilities to map between domain models and database or external representations.</li><li><strong>external_services/</strong>: Integrations with external APIs, third-party services, etc.</li></ul></li></ul><hr><h2 id="cqrs-mode-optional" tabindex="-1">CQRS Mode (Optional) <a class="header-anchor" href="#cqrs-mode-optional" aria-label="Permalink to &quot;CQRS Mode (Optional)&quot;">​</a></h2><p>When <strong>CQRS (Command Query Responsibility Segregation)</strong> is enabled, the <code>application/</code> layer is further divided:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module-name/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> application/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commands/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> handlers/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ports/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> queries/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> handlers/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ports/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dto/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> services/</span></span></code></pre></div><h3 id="cqrs-components" tabindex="-1">CQRS Components <a class="header-anchor" href="#cqrs-components" aria-label="Permalink to &quot;CQRS Components&quot;">​</a></h3><ul><li><strong>commands/handlers/</strong>: Handle write operations (create, update, delete).</li><li><strong>commands/ports/</strong>: Define command execution interfaces.</li><li><strong>queries/handlers/</strong>: Handle read operations (data fetching).</li><li><strong>queries/ports/</strong>: Define query interfaces for retrieval operations.</li></ul><hr><h2 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;Summary&quot;">​</a></h2><p>The pure DDD architecture ensures:</p><ul><li>Clear distinction between domain logic, application orchestration, and infrastructure concerns.</li><li>Strong domain modeling aligned with real-world business rules.</li><li>Optional CQRS support for scaling complex operations.</li><li>A flexible foundation for evolving business needs without tightly coupling technical concerns to the domain.</li></ul><p>This structure is ideal for systems where maintaining domain integrity and complexity management is critical.</p>`,26)]))}const F=i(t,[["render",l]]);export{c as __pageData,F as default};
