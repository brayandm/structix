import{_ as i,c as s,o as a,ae as t}from"./chunks/framework.Dh1jimFm.js";const u=JSON.parse('{"title":"Microservices Architecture","description":"","frontmatter":{},"headers":[],"relativePath":"architectures/microservices.md","filePath":"architectures/microservices.md"}'),n={name:"architectures/microservices.md"};function r(l,e,c,o,h,p){return a(),s("div",null,e[0]||(e[0]=[t(`<h1 id="microservices-architecture" tabindex="-1">Microservices Architecture <a class="header-anchor" href="#microservices-architecture" aria-label="Permalink to &quot;Microservices Architecture&quot;">​</a></h1><p>Structix provides a flexible way to scaffold backend systems based on a <strong>Microservices Architecture</strong>.</p><p>In this model, the project is composed of independent services, each responsible for a specific bounded context or functionality.</p><p>Each microservice is self-contained, can be developed, deployed, and scaled independently, and communicates with other services typically over APIs or messaging systems.</p><hr><h2 id="general-principles" tabindex="-1">General Principles <a class="header-anchor" href="#general-principles" aria-label="Permalink to &quot;General Principles&quot;">​</a></h2><ul><li>Each microservice has its own isolated codebase.</li><li>Each microservice can evolve independently from others.</li><li>Structix adapts the internal structure of each microservice depending on the chosen project architecture.</li></ul><hr><h2 id="microservice-structure-by-architecture-type" tabindex="-1">Microservice Structure by Architecture Type <a class="header-anchor" href="#microservice-structure-by-architecture-type" aria-label="Permalink to &quot;Microservice Structure by Architecture Type&quot;">​</a></h2><p>Depending on the selected architecture (Monolith, DDD, Hexagonal, or DDD + Hexagonal), the internal organization of each microservice will vary:</p><h3 id="_1-monolith-modular-simple-modules" tabindex="-1">1. Monolith Modular (Simple Modules) <a class="header-anchor" href="#_1-monolith-modular-simple-modules" aria-label="Permalink to &quot;1. Monolith Modular (Simple Modules)&quot;">​</a></h3><p>If no domain-driven (DDD) or hexagonal architecture is selected, each microservice will follow a <strong>simple modular structure</strong>:</p><ul><li>A microservice will be equivalent to a single <strong>module</strong>.</li><li>The structure inside the microservice will include typical layers like <code>controllers/</code>, <code>services/</code>, <code>repositories/</code>, <code>dto/</code>, and <code>entities/</code>.</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">microservice-name/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> controllers/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> services/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repositories/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dto/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> entities/</span></span></code></pre></div><h3 id="_2-domain-driven-design-ddd" tabindex="-1">2. Domain-Driven Design (DDD) <a class="header-anchor" href="#_2-domain-driven-design-ddd" aria-label="Permalink to &quot;2. Domain-Driven Design (DDD)&quot;">​</a></h3><p>If DDD architecture is selected:</p><ul><li>Each <strong>bounded context</strong> becomes a <strong>separate microservice</strong>.</li><li>The microservice will follow a DDD-oriented structure, including <code>domain/</code>, <code>application/</code>, and <code>infrastructure/</code> layers.</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">microservice-name/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> domain/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> application/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> infrastructure/</span></span></code></pre></div><h3 id="_3-hexagonal-architecture" tabindex="-1">3. Hexagonal Architecture <a class="header-anchor" href="#_3-hexagonal-architecture" aria-label="Permalink to &quot;3. Hexagonal Architecture&quot;">​</a></h3><p>If Hexagonal Architecture is selected:</p><ul><li>Each microservice will follow the <strong>full hexagonal prototype</strong>.</li><li>There are no internal modules; the service directly follows ports and adapters structure.</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">microservice-name/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> domain/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> application/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> adapters/</span></span></code></pre></div><h3 id="_4-ddd-hexagonal" tabindex="-1">4. DDD + Hexagonal <a class="header-anchor" href="#_4-ddd-hexagonal" aria-label="Permalink to &quot;4. DDD + Hexagonal&quot;">​</a></h3><p>If DDD + Hexagonal Architecture is selected:</p><ul><li>Each bounded context is modeled as a separate microservice.</li><li>The microservice combines DDD tactical patterns with Hexagonal structural separation.</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">microservice-name/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> domain/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> application/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> adapters/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> infrastructure/</span></span></code></pre></div><hr><h2 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;Summary&quot;">​</a></h2><p>Structix ensures that:</p><ul><li>Microservices remain consistent with the selected architectural style.</li><li>Teams can choose the best organization strategy per project.</li><li>Microservices are fully decoupled, making the system easier to scale, maintain, and evolve over time.</li></ul><p>Whether you prefer simple modular structures or fully domain-driven bounded contexts, Structix scaffolds your microservices in a clean, professional way.</p>`,31)]))}const k=i(n,[["render",r]]);export{u as __pageData,k as default};
